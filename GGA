import numpy as np

# 전자 밀도 계산 (2D로 간단화)
def electron_density(x, y):
    # 전자 밀도를 계산하는 함수 (단순히 한 점에서 밀도를 정의)
    return np.exp(-(x**2 + y**2))

# 밀도 기울기 계산 (2D)
def density_gradient(x, y):
    # 밀도 기울기 계산 (단순히 각 좌표에서 기울기를 계산)
    grad_x = -2 * x * electron_density(x, y)
    grad_y = -2 * y * electron_density(x, y)
    return np.array([grad_x, grad_y])

# GGA 교환-상관 에너지 밀도 함수 (2D)
def gga_exchange_correlation(rho, grad_rho):
    # 교환-상관 밀도 함수 (여기서는 임의의 함수 형태 사용)
    local_term = -0.5 * np.sqrt(rho)  # 예시로 임의의 교환-상관 함수
    gradient_term = 0.1 * np.dot(grad_rho, grad_rho)  # 기울기 항
    return local_term + gradient_term

# 2D 공간에서 전자 밀도와 기울기를 계산하고, GGA 교환-상관 에너지를 계산하는 함수
def calculate_energies(grid_size=5, step=0.1):
    total_energy = 0.0
    for x in np.arange(-grid_size, grid_size, step):
        for y in np.arange(-grid_size, grid_size, step):
            rho = electron_density(x, y)
            grad_rho = density_gradient(x, y)
            total_energy += gga_exchange_correlation(rho, grad_rho)
    return total_energy

# GGA 계산 결과 출력
total_energy = calculate_energies(grid_size=5, step=0.2)
print(f"Total GGA exchange-correlation energy: {total_energy:.5f}")
